
import React, { useState } from 'react';
import Header from './components/Header';
import GameCard from './components/GameCard';
import MemoryGame from './components/MemoryGame';
import ReactionTimeGame from './components/ReactionTimeGame';
import WordScrambleGame from './components/WordScrambleGame';
import MathChallengeGame from './components/MathChallengeGame';
import StroopTestGame from './components/StroopTestGame';
import FindTheOddGame from './components/FindTheOddGame';
import WordPuzzleGame from './components/WordPuzzleGame';
import PatternRecognitionGame from './components/PatternRecognitionGame';
import VisualSearchGame from './components/VisualSearchGame';
import DifficultySelector from './components/DifficultySelector';
import { GameType, Difficulty } from './types';
import useSound from './components/useSound';

const GAME_TITLES: Record<GameType, string> = {
  [GameType.Memory]: "ŸÑÿπÿ®ÿ© ÿßŸÑÿ∞ÿßŸÉÿ±ÿ©",
  [GameType.Reaction]: "ÿ≥ÿ±ÿπÿ© ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©",
  [GameType.WordScramble]: "ÿ™ÿÆŸÖŸäŸÜ ÿßŸÑŸÉŸÑŸÖÿßÿ™",
  [GameType.MathChallenge]: "ÿ™ÿ≠ÿØŸä ÿßŸÑÿ≠ÿ≥ÿßÿ®",
  [GameType.StroopTest]: "ÿßÿÆÿ™ÿ®ÿßÿ± ÿ≥ÿ™ÿ±Ÿàÿ®",
  [GameType.FindTheOdd]: "ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑŸÖÿÆÿ™ŸÑŸÅ",
  [GameType.WordPuzzle]: "ÿ£ŸÑÿ∫ÿßÿ≤ ÿßŸÑŸÉŸÑŸÖÿßÿ™",
  [GameType.PatternRecognition]: "ÿßŸÑÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑",
  [GameType.VisualSearch]: "ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ®ÿµÿ±Ÿä",
};

const App: React.FC = () => {
  const [screen, setScreen] = useState<'menu' | 'difficulty' | 'game'>('menu');
  const [selectedGame, setSelectedGame] = useState<GameType | null>(null);
  const [selectedDifficulty, setSelectedDifficulty] = useState<Difficulty | null>(null);
  const [isMuted, setIsMuted] = useState(false);
  const playSound = useSound(isMuted);

  const toggleMute = () => {
    setIsMuted(prev => !prev);
  };

  const handleGameSelect = (gameType: GameType) => {
    playSound('start');
    setSelectedGame(gameType);
    if (gameType === GameType.Memory) {
        setScreen('difficulty');
    } else {
        setScreen('game');
    }
  };
  
  const handleDifficultySelect = (difficulty: Difficulty) => {
    playSound('click');
    setSelectedDifficulty(difficulty);
    setScreen('game');
  }

  const handleBackToMenu = () => {
    playSound('click');
    setScreen('menu');
    setSelectedGame(null);
    setSelectedDifficulty(null);
  };

  const handleTitleClick = () => {
    if (screen !== 'menu') {
      handleBackToMenu();
    }
  };

  const renderContent = () => {
    // FIX: The `onBackToMenu` shorthand property was used without a corresponding variable in scope.
    // Assign `handleBackToMenu` to the `onBackToMenu` property.
    const gameProps = { onBackToMenu: handleBackToMenu, isMuted };
    switch (screen) {
      case 'game':
        if (!selectedGame) return renderGameMenu();
        switch (selectedGame) {
          case GameType.Memory:
            return <MemoryGame {...gameProps} difficulty={selectedDifficulty || 'medium'} />;
          case GameType.Reaction:
            return <ReactionTimeGame {...gameProps} />;
          case GameType.WordScramble:
            return <WordScrambleGame {...gameProps} />;
          case GameType.MathChallenge:
            return <MathChallengeGame {...gameProps} />;
          case GameType.StroopTest:
            return <StroopTestGame {...gameProps} />;
          case GameType.FindTheOdd:
            return <FindTheOddGame {...gameProps} />;
          case GameType.WordPuzzle:
            return <WordPuzzleGame {...gameProps} />;
          case GameType.PatternRecognition:
            return <PatternRecognitionGame {...gameProps} />;
          case GameType.VisualSearch:
            return <VisualSearchGame {...gameProps} />;
          default:
            return renderGameMenu();
        }
      case 'difficulty':
         if (!selectedGame) return renderGameMenu();
         return <DifficultySelector 
                    gameTitle={GAME_TITLES[selectedGame]}
                    onSelectDifficulty={handleDifficultySelect}
                    onBack={handleBackToMenu}
                    isMuted={isMuted}
                />
      case 'menu':
      default:
        return renderGameMenu();
    }
  };

  const renderGameMenu = () => (
    <div className="p-8">
      <h2 className="text-3xl md:text-4xl font-bold text-center text-teal-800 mb-8">ÿßÿÆÿ™ÿ± ŸÑÿπÿ®ÿ© ŸÑÿ™ÿ®ÿØÿ£</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
        <GameCard
          title="ŸÑÿπÿ®ÿ© ÿßŸÑÿ∞ÿßŸÉÿ±ÿ©"
          description="ÿ™ŸÇŸàŸä ÿßŸÑÿ∞ÿßŸÉÿ±ÿ© ŸÇÿµŸäÿ±ÿ© ÿßŸÑŸÖÿØŸâ ŸàÿßŸÑÿ™ÿ±ŸÉŸäÿ≤."
          emoji="üß†"
          onClick={() => handleGameSelect(GameType.Memory)}
        />
        <GameCard
          title="ÿ≥ÿ±ÿπÿ© ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©"
          description="ÿ™ÿ≤ŸäÿØ ŸÖŸÜ ÿ≥ÿ±ÿπÿ© ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© Ÿàÿ±ÿØŸàÿØ ÿßŸÑŸÅÿπŸÑ."
          emoji="‚ö°Ô∏è"
          onClick={() => handleGameSelect(GameType.Reaction)}
        />
        <GameCard
          title="ÿ™ÿÆŸÖŸäŸÜ ÿßŸÑŸÉŸÑŸÖÿßÿ™"
          description="ÿ™ŸÜÿ¥ÿ∑ ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ÿßŸÑŸÑÿ∫ŸàŸäÿ© Ÿàÿ≥ÿ±ÿπÿ© ÿßŸÑÿ™ŸÅŸÉŸäÿ±."
          emoji="üî°"
          onClick={() => handleGameSelect(GameType.WordScramble)}
        />
        <GameCard
          title="ÿ™ÿ≠ÿØŸä ÿßŸÑÿ≠ÿ≥ÿßÿ®"
          description="ÿ™ÿ≠ÿ≥ŸÜ ÿßŸÑŸÇÿØÿ±ÿ© ÿπŸÑŸâ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ∞ŸáŸÜŸä ÿßŸÑÿ≥ÿ±Ÿäÿπ."
          emoji="üßÆ"
          onClick={() => handleGameSelect(GameType.MathChallenge)}
        />
        <GameCard
          title="ÿßÿÆÿ™ÿ®ÿßÿ± ÿ≥ÿ™ÿ±Ÿàÿ®"
          description="ÿ™ÿπÿ≤ÿ≤ ÿßŸÑÿ™ÿ±ŸÉŸäÿ≤ ŸÑŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ™ÿ∂ÿßÿ±ÿ®ÿ©."
          emoji="üé®"
          onClick={() => handleGameSelect(GameType.StroopTest)}
        />
         <GameCard
          title="ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑŸÖÿÆÿ™ŸÑŸÅ"
          description="ÿ™ÿ¥ÿ≠ÿ∞ ŸÇŸàÿ© ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ© ŸàÿßŸÑÿßŸÜÿ™ÿ®ÿßŸá ŸÑŸÑÿ™ŸÅÿßÿµŸäŸÑ."
          emoji="üßê"
          onClick={() => handleGameSelect(GameType.FindTheOdd)}
        />
        <GameCard
          title="ÿ£ŸÑÿ∫ÿßÿ≤ ÿßŸÑŸÉŸÑŸÖÿßÿ™"
          description="ÿ™ÿ∑Ÿàÿ± ŸÖŸáÿßÿ±ÿßÿ™ ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ŸàÿßŸÑŸÖŸÅÿ±ÿØÿßÿ™."
          emoji="üß©"
          onClick={() => handleGameSelect(GameType.WordPuzzle)}
        />
         <GameCard
          title="ÿßŸÑÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑"
          description="ÿ™ŸÇŸàŸä ÿßŸÑÿ™ŸÅŸÉŸäÿ± ÿßŸÑŸÖŸÜÿ∑ŸÇŸä ŸàÿßŸÑŸÇÿØÿ±ÿ© ÿπŸÑŸâ ÿßŸÑÿ™ŸÜÿ®ÿ§."
          emoji="‚ú®"
          onClick={() => handleGameSelect(GameType.PatternRecognition)}
        />
         <GameCard
          title="ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ®ÿµÿ±Ÿä"
          description="ÿ™ÿ≠ÿ≥ŸÜ ÿßŸÑÿßŸÜÿ™ÿ®ÿßŸá ÿßŸÑÿ®ÿµÿ±Ÿä Ÿàÿ≥ÿ±ÿπÿ© ÿßŸÑÿ®ÿ≠ÿ´."
          emoji="üéØ"
          onClick={() => handleGameSelect(GameType.VisualSearch)}
        />
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-amber-50 text-slate-800 flex flex-col">
      <Header onTitleClick={handleTitleClick} isMuted={isMuted} toggleMute={toggleMute} />
      <main className="flex-grow container mx-auto px-4 py-8">
        {renderContent()}
      </main>
      <footer className="text-center py-4 text-gray-500">
        <p>ÿµŸèŸÜÿπ ÿ®ÿ≠ÿ® ŸÑŸÉÿ®ÿßÿ±ŸÜÿß ÿßŸÑÿ£ÿπÿ≤ÿßÿ° ‚ù§Ô∏è</p>
      </footer>
    </div>
  );
};

export default App;
